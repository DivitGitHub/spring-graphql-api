/*
 * This file is generated by jOOQ.
 */
package com.divitngoc.generated.tables;


import com.divitngoc.generated.DefaultSchema;
import com.divitngoc.generated.Indexes;
import com.divitngoc.generated.Keys;
import com.divitngoc.generated.tables.records.ArtistRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Artist extends TableImpl<ArtistRecord> {

    private static final long serialVersionUID = -1966714279;

    /**
     * The reference instance of <code>ARTIST</code>
     */
    public static final Artist ARTIST = new Artist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtistRecord> getRecordType() {
        return ArtistRecord.class;
    }

    /**
     * The column <code>ARTIST.ID</code>.
     */
    public final TableField<ArtistRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>ARTIST.FIRST_NAME</code>.
     */
    public final TableField<ArtistRecord, String> FIRST_NAME = createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>ARTIST.LAST_NAME</code>.
     */
    public final TableField<ArtistRecord, String> LAST_NAME = createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>ARTIST</code> table reference
     */
    public Artist() {
        this(DSL.name("ARTIST"), null);
    }

    /**
     * Create an aliased <code>ARTIST</code> table reference
     */
    public Artist(String alias) {
        this(DSL.name(alias), ARTIST);
    }

    /**
     * Create an aliased <code>ARTIST</code> table reference
     */
    public Artist(Name alias) {
        this(alias, ARTIST);
    }

    private Artist(Name alias, Table<ArtistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Artist(Name alias, Table<ArtistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Artist(Table<O> child, ForeignKey<O, ArtistRecord> key) {
        super(child, key, ARTIST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ArtistRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ARTIST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArtistRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArtistRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtistRecord>>asList(Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Artist as(String alias) {
        return new Artist(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Artist as(Name alias) {
        return new Artist(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Artist rename(String name) {
        return new Artist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Artist rename(Name name) {
        return new Artist(name, null);
    }
}
