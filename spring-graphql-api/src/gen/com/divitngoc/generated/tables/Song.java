/*
 * This file is generated by jOOQ.
 */
package com.divitngoc.generated.tables;


import com.divitngoc.generated.DefaultSchema;
import com.divitngoc.generated.Indexes;
import com.divitngoc.generated.Keys;
import com.divitngoc.generated.tables.records.SongRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Song extends TableImpl<SongRecord> {

    private static final long serialVersionUID = -1256877559;

    /**
     * The reference instance of <code>SONG</code>
     */
    public static final Song SONG = new Song();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SongRecord> getRecordType() {
        return SongRecord.class;
    }

    /**
     * The column <code>SONG.ID</code>.
     */
    public final TableField<SongRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>SONG.SUMMARY</code>.
     */
    public final TableField<SongRecord, String> SUMMARY = createField("SUMMARY", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>SONG.TITLE</code>.
     */
    public final TableField<SongRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>SONG.LYRICS</code>.
     */
    public final TableField<SongRecord, String> LYRICS = createField("LYRICS", org.jooq.impl.SQLDataType.VARCHAR(20000), this, "");

    /**
     * The column <code>SONG.PUBLISHED_DATE</code>.
     */
    public final TableField<SongRecord, LocalDate> PUBLISHED_DATE = createField("PUBLISHED_DATE", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>SONG.ARTIST_ID</code>.
     */
    public final TableField<SongRecord, Integer> ARTIST_ID = createField("ARTIST_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>SONG</code> table reference
     */
    public Song() {
        this(DSL.name("SONG"), null);
    }

    /**
     * Create an aliased <code>SONG</code> table reference
     */
    public Song(String alias) {
        this(DSL.name(alias), SONG);
    }

    /**
     * Create an aliased <code>SONG</code> table reference
     */
    public Song(Name alias) {
        this(alias, SONG);
    }

    private Song(Name alias, Table<SongRecord> aliased) {
        this(alias, aliased, null);
    }

    private Song(Name alias, Table<SongRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Song(Table<O> child, ForeignKey<O, SongRecord> key) {
        super(child, key, SONG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_SONG_ARTIST_ID_INDEX_2, Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SongRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SONG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SongRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SongRecord>> getKeys() {
        return Arrays.<UniqueKey<SongRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SongRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SongRecord, ?>>asList(Keys.FK_SONG_ARTIST_ID);
    }

    public Artist artist() {
        return new Artist(this, Keys.FK_SONG_ARTIST_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Song as(String alias) {
        return new Song(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Song as(Name alias) {
        return new Song(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Song rename(String name) {
        return new Song(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Song rename(Name name) {
        return new Song(name, null);
    }
}
